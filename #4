{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Assignment 4\n",
    "*Topics: least squares approximation*\n",
    "\n",
    "In this assignment we use least squares approximation to find curves of best fit that come from noisy data, where the original data came from a polynomial. We will see that interpolation is very sensitive to noisy data, and can produce poor approximations of the original curve. On the other hand, a curve of best fit of degree much lower than the size of the data can produce more reliable approximations. \n",
    "\n",
    "For details on how to upload your notebook back to canvas, check the canvas homepage for a quick tutorial. For additional help with the jupyter workflow and python in general, attend an office hour at 6pm PST on Wednesday.\n",
    "\n",
    "*Double check your variable names, and don't import extra libraries! Seriously! Double check your variable names!*\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import scipy.linalg as la"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Linear Regression\n",
    " \n",
    "Suppose we have $n+1$ points\n",
    "\n",
    "$$\n",
    "(t_0,y_0) , (t_1,y_1) , \\dots , (t_n,y_n)\n",
    "$$\n",
    "\n",
    "and we want to fit a line\n",
    "\n",
    "$$\n",
    "y=c_0 + c_1t\n",
    "$$\n",
    "\n",
    "that \"best fits\" the data. There are different ways to quantify what \"best fit\" means but the most common method is called [least squares linear regression](https://en.wikipedia.org/wiki/Linear_regression). In least squares linear regression, we want to minimize the sum of squared errors\n",
    "\n",
    "$$\n",
    "SSE = \\sum_i (y_i - (c_0 + c_1 t_i))^2\n",
    "$$\n",
    "\n",
    "In matrix notation\n",
    "\n",
    "$$\n",
    "A =\n",
    "\\begin{bmatrix}\n",
    "1 & t_0 \\\\\\\n",
    "1 & t_1 \\\\\\\n",
    "\\vdots & \\vdots \\\\\\\n",
    "1 & t_n\n",
    "\\end{bmatrix}\n",
    "\\ , \\ \\\n",
    "\\mathbf{y} =\n",
    "\\begin{bmatrix}\n",
    "y_0 \\\\\\\n",
    "y_1 \\\\\\\n",
    "\\vdots \\\\\\\n",
    "y_n\n",
    "\\end{bmatrix}\n",
    "\\ , \\ \\\n",
    "\\mathbf{c} = \n",
    "\\begin{bmatrix}\n",
    "c_0 \\\\\\ c_1\n",
    "\\end{bmatrix}\n",
    "$$\n",
    "\n",
    "then the sum of squared errors can be expressed as\n",
    "\n",
    "$$\n",
    "SSE = \\Vert \\mathbf{y} - A \\mathbf{c} \\Vert^2\n",
    "$$\n",
    "\n",
    "We solve for the coefficients $\\mathbf{c} = [c_0,c_1]^T$ which minimize $\\Vert \\mathbf{y} - A \\mathbf{c} \\Vert^2$ in two ways:"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Normal Equations\n",
    "\n",
    "The coefficient vector $\\mathbf{c}$ is the unique solution of the system \n",
    "\n",
    "$$\n",
    "\\left( A^T A \\right) \\mathbf{c} = A^T \\mathbf{y} \\tag{1}\n",
    "$$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### QR Decomposition\n",
    "\n",
    "Let $A = Q_1R_1$ be the [(thin) QR decomposition](https://en.wikipedia.org/wiki/QR_decomposition) of $A$ (where $R_1$ is square upper triangular). The coefficient vector $\\mathbf{c}$ is the unique solution of the system\n",
    "\n",
    "$$\n",
    "R_1 \\mathbf{c} = Q_1^T \\mathbf{y} \\tag{2}\n",
    "$$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Polynomial Regression\n",
    "\n",
    "The same idea works for fitting a degree $d$ polynomial model\n",
    "\n",
    "$$\n",
    "y = c_0 + c_1t + c_2t^2 + \\cdots + c_dt^d\n",
    "$$\n",
    "\n",
    "to a set of $n+1$ data points\n",
    "\n",
    "$$\n",
    "(t_0,y_0), (t_1,y_1), \\dots , (t_n,y_n)\n",
    "$$\n",
    "\n",
    "We form the matrices as before but now the Vandermonde matrix $A$ has $d+1$ columns\n",
    "\n",
    "$$\n",
    "A =\n",
    "\\begin{bmatrix}\n",
    "1 & t_0 & t_0^2 & \\cdots & t_0^d \\\\\\\n",
    "1 & t_1 & t_1^2 & \\cdots & t_1^d \\\\\\\n",
    " & \\vdots & & & \\vdots \\\\\\\n",
    "1 & t_n & t_n^2 & \\cdots & t_n^d\n",
    "\\end{bmatrix}\n",
    "\\ , \\ \\\n",
    "\\mathbf{y} =\n",
    "\\begin{bmatrix}\n",
    "y_0 \\\\\\\n",
    "y_1 \\\\\\\n",
    "\\vdots \\\\\\\n",
    "y_n\n",
    "\\end{bmatrix}\n",
    "\\ , \\ \\\n",
    "\\mathbf{c} =\n",
    "\\begin{bmatrix}\n",
    "c_0 \\\\\\\n",
    "c_1 \\\\\\\n",
    "c_2 \\\\\\\n",
    "\\vdots \\\\\\\n",
    "c_d\n",
    "\\end{bmatrix}\n",
    "$$\n",
    "\n",
    "The coefficients $\\mathbf{c} = [c_0,c_1,c_2,\\dots,c_d]^T$ which minimize the sum of squared errors $SSE$ is the unique solution of the linear system\n",
    "\n",
    "$$\n",
    "\\left( A^T A \\right) \\mathbf{c} = \\left( A^T \\right) \\mathbf{y}\n",
    "$$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Exercises\n",
    "\n",
    "**Exercise 1** \n",
    "The point of this exercise is to familiarize yourself with using the normal equation and the QR decomposition to find linear and quadratic regressions. \n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Exercise 1(a)**  \n",
    "\n",
    "For the set of points $S$ given below find the line of best fit for $S$ using least squares regression. Use equations (1) and (2) and check that the answer is the same in each case. Record your answer by assigning the variable C1 the list [a,b] where the line you found has the form $y = ax+b$. \n",
    "\n",
    "Note that the code Q,R= np.linalg.qr(A) will give the (full) QR-decomposition of A with A = QR. \n",
    "\n",
    "In the below python cell, the variable XVAL1A is a list of the x-values and YVAL1A is a list of the y-values (to save you time). To be clear, the points of $S$ consist of the pairs $(XVAL1A[i],YVAL1A[i])$ for $i = 0,1,...,19$. \n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "metadata": {},
   "outputs": [],
   "source": [
    "XVAL1A = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]\n",
    "YVAL1A = [-10.4, 4.66, 4.08, -2.09, 4.04, 6.12, 9.28, 11.23, 12.56, 25.54, 25.79, 14.93, 13.9, 34.65, 21.61, 26.89, 28.78, 30.18, 30.0, 40.05]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "metadata": {
    "deletable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "82888e42fceeca47cb15f09803db9260",
     "grade": false,
     "grade_id": "cell-832fd0073c550d50",
     "locked": false,
     "schema_version": 3,
     "solution": true,
     "task": false
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[2.08360902, -3.20428571]\n"
     ]
    }
   ],
   "source": [
    "# YOUR CODE HERE\n",
    "\n",
    "A = np.array([[1,XVAL1A[0]],[1,XVAL1A[1]],[1,XVAL1A[2]],[1,XVAL1A[3]],[1,XVAL1A[4]],[1,XVAL1A[5]],[1,XVAL1A[6]],[1,XVAL1A[7]],\n",
    "    [1,XVAL1A[8]],[1,XVAL1A[9]],[1,XVAL1A[10]],[1,XVAL1A[11]],[1,XVAL1A[12]],[1,XVAL1A[13]],[1,XVAL1A[14]],[1,XVAL1A[15]],\n",
    "    [1,XVAL1A[16]],[1,XVAL1A[17]],[1,XVAL1A[18]],[1,XVAL1A[19]]])\n",
    "\n",
    "y = np.array([[YVAL1A[0]],[YVAL1A[1]],[YVAL1A[2]],[YVAL1A[3]],[YVAL1A[4]],[YVAL1A[5]],[YVAL1A[6]],[YVAL1A[7]],[YVAL1A[8]],\n",
    "    [YVAL1A[9]],[YVAL1A[10]],[YVAL1A[11]],[YVAL1A[12]],[YVAL1A[13]],[YVAL1A[14]],[YVAL1A[15]],[YVAL1A[16]],[YVAL1A[17]],\n",
    "    [YVAL1A[18]],[YVAL1A[19]]])\n",
    "\n",
    "#print A\n",
    "#print y\n",
    "\n",
    "B = A.T @ A\n",
    "C = A.T @ y\n",
    "\n",
    "m = np.linalg.solve(B,C)\n",
    "#print(m)\n",
    "\n",
    "C1 = [2.08360902,-3.20428571]\n",
    "print(C1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "64a9ecc75271771d4f3f9a3a541f317b",
     "grade": true,
     "grade_id": "cell-c7278cff525bfbd5",
     "locked": true,
     "points": 1,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Checkpoint 1.1 passed\n"
     ]
    }
   ],
   "source": [
    "assert isinstance(C1,list), \"make C1 a list\"\n",
    "print(\"Checkpoint 1.1 passed\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Exercise 1(b)**  \n",
    "\n",
    "For the set of points $T$ given below find the quadratic curve of best fit for $T$ using least squares regression. Record your answer by assigning the variable C2 the list [a,b,c] where the quadratic you found has the form $y = ax^2+bx+c$. \n",
    "\n",
    "\n",
    "\n",
    "$T$ is a set of 28 points. The $X$-values in ascending order are:\n",
    "\n",
    "[-90, -83, -76, -69, -62, -55, -48, -41, -34, -27, -20, -13, -6, 1, 8, 15, 22, 29, 36, 43, 50, 57, 64, 71, 78, 85, 92, 99]\n",
    "\n",
    "The corresponding $Y$-values, are: \n",
    "\n",
    "[40595.0, 34532.0, 28959.9, 23879.0, 19284.6, 15185.1, 11571.0, 8451.2, 5817.0, 3675.8, 2025.2, 860.9, 190.0, 7.0, 316.9, 1115.0, 2403.1, 4179.3, 6449.4, 9205.4, 12454.9, 16190.7, 20420.7, 25139.3, 30346.6, 36042.7, 42231.5, 48908.6]\n",
    "\n",
    "In the below python cell, the variable XVAL1B is a list of the x-values and YVAL1B is a list of the y-values (to save you time). To be clear, the points of $T$ consist of the pairs $(XVAL1B[i],YVAL1B[i])$ for $i = 0,1,...,27$. \n",
    "\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "metadata": {},
   "outputs": [],
   "source": [
    "XVAL1B = [-90, -83, -76, -69, -62, -55, -48, -41, -34, -27, -20, -13, -6, 1, 8, 15, 22, 29, 36, 43, 50, 57, 64, 71, 78, 85, 92, 99]\n",
    "YVAL1B = [31991.0, 41459.7, 37941.4, 23852.1, 14275.0, 22522.1, 17911.4, 8225.7, 3314.7, 10473.0, 11163.9, -2039.0, 9611.9, 2696.3, 2563.8, 2560.1000000000004, -3437.6000000000004, 2355.3, 4226.799999999999, 4420.599999999999, 4189.299999999999, 21435.2, 13873.9, 15265.099999999999, 40025.0, 33263.0, 36601.3, 39856.3]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "metadata": {
    "deletable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "e543ad448d5b3c120b53567e0ba4454e",
     "grade": false,
     "grade_id": "cell-50e1bd868378e3c8",
     "locked": false,
     "schema_version": 3,
     "solution": true,
     "task": false
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[4.5270043, -38.35367673, 1699.71593078]\n"
     ]
    }
   ],
   "source": [
    "# YOUR CODE HERE\n",
    "\n",
    "A = np.array([XVAL1B[0],XVAL1B[1],XVAL1B[2],XVAL1B[3],XVAL1B[4],XVAL1B[5],XVAL1B[6],XVAL1B[7],XVAL1B[8],XVAL1B[9],\n",
    "             XVAL1B[10],XVAL1B[11],XVAL1B[12],XVAL1B[13],XVAL1B[14],XVAL1B[15],XVAL1B[16],XVAL1B[17],XVAL1B[18],XVAL1B[19],\n",
    "             XVAL1B[20],XVAL1B[21],XVAL1B[22],XVAL1B[23],XVAL1B[24],XVAL1B[25],XVAL1B[26],XVAL1B[27]])\n",
    "\n",
    "y = np.array([[YVAL1B[0]],[YVAL1B[1]],[YVAL1B[2]],[YVAL1B[3]],[YVAL1B[4]],[YVAL1B[5]],[YVAL1B[6]],[YVAL1B[7]],[YVAL1B[8]],\n",
    "    [YVAL1B[9]],[YVAL1B[10]],[YVAL1B[11]],[YVAL1B[12]],[YVAL1B[13]],[YVAL1B[14]],[YVAL1B[15]],[YVAL1B[16]],[YVAL1B[17]],\n",
    "    [YVAL1B[18]],[YVAL1B[19]],[YVAL1B[20]],[YVAL1B[21]],[YVAL1B[22]],[YVAL1B[23]],[YVAL1B[24]],[YVAL1B[25]],[YVAL1B[26]],\n",
    "    [YVAL1B[27]]])\n",
    "\n",
    "#print(A)\n",
    "#print(y)\n",
    "\n",
    "V = np.vander(A, 3, increasing = True)\n",
    "#print(V)\n",
    "\n",
    "B = V.T @ V\n",
    "C = V.T @ y\n",
    "\n",
    "m = np.linalg.solve(B,C)\n",
    "#print(m)\n",
    "\n",
    "C2 = [4.5270043,-38.35367673,1699.71593078]\n",
    "print(C2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "46b941cbec9903300c9df6a089245a80",
     "grade": true,
     "grade_id": "cell-9e5c7d271c3c23fb",
     "locked": true,
     "points": 1,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Checkpoint 1.3 passed\n"
     ]
    }
   ],
   "source": [
    "assert isinstance(C2,list), \"make C2 a list\"\n",
    "print(\"Checkpoint 1.3 passed\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Exercise 1(c)** (Not for marks)\n",
    "\n",
    "Lets plot the points and the approximation polynomial for both 1(a) and 1(b). To plot the line or curve found through the regression, first define a python function that gives the value of the function. I've called it regline and regquad. The plotting cells should run using the regression curve that you found in 1(a) and 1(b), so these plots give you a way of checking your answer! If the curve you see doesn't approximate the point set well, then go back and check your calculation!\n",
    "\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "def regline(t):\n",
    "    return C1[0]*t + C1[1]\n",
    "\n",
    "\n",
    "t = np.arange(-0.5, 19.5, 0.1)\n",
    "\n",
    "XVAL1A = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]\n",
    "YVAL1A = [-10.4, 4.66, 4.08, -2.09, 4.04, 6.12, 9.28, 11.23, 12.56, 25.54, 25.79, 14.93, 13.9, 34.65, 21.61, 26.89, 28.78, 30.18, 30.0, 40.05]\n",
    "\n",
    "\n",
    "plt.plot(t, regline(t),'red',XVAL1A, YVAL1A, 'bs')\n",
    "plt.show()\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "def regquad(t):\n",
    "    return C2[0]*t**2 + C2[1]*t+C2[2]\n",
    "\n",
    "\n",
    "t2 = np.arange(min(XVAL1B)-1, max(XVAL1B)+1, 0.1)\n",
    "\n",
    "plt.plot(t2, regquad(t2),'red',XVAL1B, YVAL1B, 'bs')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Exercise 2**\n",
    "\n",
    "In this exercise we have selected a degree 8 polynomial. You'll first discover what the polynomial was using Vandermonde interpolation (i.e. monomial interpolation). After that, we will see that interpolating a data set with error gives a new curve that is likely to be a poor approxmation of the original. On the other hand, we will see that doing a regression on data set with error with a degree significantly smaller than the size of the data set can provide much more 'robust' or 'repeatable' approximations. \n",
    "\n",
    "**Exercise 2(a)** The following set of points belong to a degree 8 curve. The x-values XVAL2A correspond to the y-values YVAL2A in order. Use Vandermonde interpolation to find the original degree 8 curve. Record your answer by assigning the variable POLY8 = [a0,a1,a2,a3,a4,a5,a6,a7,a8] where the coefficient of the $x^i$ term is ai. \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "metadata": {},
   "outputs": [],
   "source": [
    "XVAL2A = [-2.5,-1.8,-1.2,-0.5,-0.25,0.4,1.5,2.3,3.5]\n",
    "YVAL2A = [-527.87109375, 102.37280256000003, 53.137244159999966, -55.37109375, -35.05393981933594, 41.06059776, -55.37109375, 80.27820800999987, -527.87109375]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "metadata": {
    "deletable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "cef63b3e7f5af23897c9c9827235f8ef",
     "grade": false,
     "grade_id": "cell-f7ec8f7bb25f1e7d",
     "locked": false,
     "schema_version": 3,
     "solution": true,
     "task": false
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[ 1.00000000e+00 -2.50000000e+00  6.25000000e+00 -1.56250000e+01\n",
      "   3.90625000e+01 -9.76562500e+01  2.44140625e+02 -6.10351562e+02\n",
      "   1.52587891e+03]\n",
      " [ 1.00000000e+00 -1.80000000e+00  3.24000000e+00 -5.83200000e+00\n",
      "   1.04976000e+01 -1.88956800e+01  3.40122240e+01 -6.12220032e+01\n",
      "   1.10199606e+02]\n",
      " [ 1.00000000e+00 -1.20000000e+00  1.44000000e+00 -1.72800000e+00\n",
      "   2.07360000e+00 -2.48832000e+00  2.98598400e+00 -3.58318080e+00\n",
      "   4.29981696e+00]\n",
      " [ 1.00000000e+00 -5.00000000e-01  2.50000000e-01 -1.25000000e-01\n",
      "   6.25000000e-02 -3.12500000e-02  1.56250000e-02 -7.81250000e-03\n",
      "   3.90625000e-03]\n",
      " [ 1.00000000e+00 -2.50000000e-01  6.25000000e-02 -1.56250000e-02\n",
      "   3.90625000e-03 -9.76562500e-04  2.44140625e-04 -6.10351562e-05\n",
      "   1.52587891e-05]\n",
      " [ 1.00000000e+00  4.00000000e-01  1.60000000e-01  6.40000000e-02\n",
      "   2.56000000e-02  1.02400000e-02  4.09600000e-03  1.63840000e-03\n",
      "   6.55360000e-04]\n",
      " [ 1.00000000e+00  1.50000000e+00  2.25000000e+00  3.37500000e+00\n",
      "   5.06250000e+00  7.59375000e+00  1.13906250e+01  1.70859375e+01\n",
      "   2.56289062e+01]\n",
      " [ 1.00000000e+00  2.30000000e+00  5.29000000e+00  1.21670000e+01\n",
      "   2.79841000e+01  6.43634300e+01  1.48035889e+02  3.40482545e+02\n",
      "   7.83109853e+02]\n",
      " [ 1.00000000e+00  3.50000000e+00  1.22500000e+01  4.28750000e+01\n",
      "   1.50062500e+02  5.25218750e+02  1.83826562e+03  6.43392969e+03\n",
      "   2.25187539e+04]]\n",
      "[9.094947017729282e-13, 144.0000000000018, -36.00000000001754, -196.0000000000107, 49.000000000014104, 56.00000000000509, -14.000000000003572, -4.000000000000573, 1.000000000000272]\n"
     ]
    }
   ],
   "source": [
    "# YOUR CODE HERE\n",
    "\n",
    "S2 = np.array(XVAL2A)\n",
    "V2 = np.vander(S2, increasing = True)\n",
    "print(V2)\n",
    "b = np.array(YVAL2A).reshape(9,1)\n",
    "aa = np.linalg.solve(V2, b)\n",
    "\n",
    "a0 = aa[0,0]\n",
    "a1 = aa[1,0]\n",
    "a2 = aa[2,0]\n",
    "a3 = aa[3,0]\n",
    "a4 = aa[4,0]\n",
    "a5 = aa[5,0]\n",
    "a6 = aa[6,0]\n",
    "a7 = aa[7,0]\n",
    "a8 = aa[8,0]\n",
    "POLY8 = [a0,a1,a2,a3,a4,a5,a6,a7,a8]\n",
    "print(POLY8)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "db993abe5ca04cd19dd74bea42a3abea",
     "grade": true,
     "grade_id": "cell-f43ed5e52b995b39",
     "locked": true,
     "points": 1,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Checkpoint 2.1 passed\n"
     ]
    }
   ],
   "source": [
    "assert isinstance(POLY8,list), \"make POLY8 a list\"\n",
    "print(\"Checkpoint 2.1 passed\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Exercise 2(b)** Now lets introduce some error into the points used in 2(a) and interpolate again. After interpolating, use the below cell to plot the true polynomial with the one you've found after the introduced error. You should see that they are quite different. The points with error are given in the below cell. Use Vandermonde interpolation to find the new polynomial. \n",
    "\n",
    "Step 1: Assign the variable EPOLY8 = [a0,a1,a2,a3,a4,a5,a6,a7,a8] where the coefficient of the $x^i$ term is ai in your new polynomial. \n",
    "\n",
    "\n",
    "\n",
    "Step 2: If $p(x)$ is the true polynomial found in 2(a) and $p_e(x)$ is the polynomial you find with the 'data with noise' set given below, assign the variable E2B the value \n",
    "$$ |p(1.4)-p_e(1.4)|/|p(1.4)|,$$\n",
    "a measure of error. \n",
    "\n",
    "Step 3: Run the plotting cell to see the difference between the two polynomials. (not for marks)\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "metadata": {},
   "outputs": [],
   "source": [
    "XVAL2B = XVAL2A\n",
    "YVAL2B = [-564.8220703125, 178.12867645440005, 11.15882127359999, -31.561523437500004, -68.00464324951172, 18.477268992, -34.8837890625, 142.0924281776998, -311.4439453125]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "metadata": {
    "deletable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "1bba0b503ef6159913935df9c9b3d7f2",
     "grade": false,
     "grade_id": "cell-79b060ff74e7ad15",
     "locked": false,
     "schema_version": 3,
     "solution": true,
     "task": false
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[-73.65199449, 72.43479441, 418.13821794, 77.74126372, -322.49291887, -79.61745641, 81.55399803, 11.60750868, -6.36517435]\n",
      "1.7178434717013584\n"
     ]
    }
   ],
   "source": [
    "# YOUR CODE HERE\n",
    "\n",
    "A = np.array([XVAL2B[0],XVAL2B[1],XVAL2B[2],XVAL2B[3],XVAL2B[4],XVAL2B[5],XVAL2B[6],XVAL2B[7],XVAL2B[8]])\n",
    "y = np.array([[YVAL2B[0]],[YVAL2B[1]],[YVAL2B[2]],[YVAL2B[3]],[YVAL2B[4]],[YVAL2B[5]],[YVAL2B[6]],[YVAL2B[7]],[YVAL2B[8]]])\n",
    "\n",
    "#print(A)\n",
    "#print(y)\n",
    "\n",
    "V = np.vander(A, 9, increasing = True)\n",
    "#print(V)\n",
    "\n",
    "B = V.T @ V\n",
    "C = V.T @ y\n",
    "\n",
    "m = np.linalg.solve(B,C)\n",
    "#print(m)\n",
    "\n",
    "EPOLY8 = [-73.65199449,72.43479441,418.13821794,77.74126372,-322.49291887,-79.61745641,81.55399803,11.60750868,-6.36517435]\n",
    "print(EPOLY8)\n",
    "\n",
    "ax = -2.89508929e-08 + (1.44000000e+02 * 1.4) + (-3.59999998e+01 * (1.4**2)) + (-1.96000000e+02 * (1.4**3)) + (4.89999998e+01 * (1.4**4)) + (5.60000000e+01 * (1.4**5)) + (-1.40000000e+01 * (1.4**6)) + (-3.99999999e+00 * (1.4**7)) + (9.99999997e-01 * (1.4**8))\n",
    "bx = -73.65199449 + (72.43479441 * 1.4) + (418.13821794 * (1.4**2)) + (77.74126372 * (1.4**3)) + (-322.49291887 * (1.4**4)) + (-79.61745641 * (1.4**5)) + (81.55399803 * (1.4**6)) + (11.60750868 * (1.4**7)) + (-6.36517435 * (1.4**8))\n",
    "\n",
    "#print(ax)\n",
    "#print(bx)\n",
    "\n",
    "t = abs(ax-bx)\n",
    "#print(t)\n",
    "\n",
    "u = abs(ax)\n",
    "#print(u)\n",
    "\n",
    "E2B = t/u\n",
    "print(E2B)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "7db4df688f35c5f216b5797bfe41c292",
     "grade": true,
     "grade_id": "cell-faf1bd50f9433569",
     "locked": true,
     "points": 2,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Checkpoint 2.3 passed\n"
     ]
    }
   ],
   "source": [
    "assert isinstance(EPOLY8,list), \"make EPOLY8 a list\"\n",
    "print(\"Checkpoint 2.3 passed\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "f9828dd157452666ff53c746ab09fb8d",
     "grade": true,
     "grade_id": "cell-85de7b218f340c9f",
     "locked": true,
     "points": 2,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Checkpoint 2.5 passed\n"
     ]
    }
   ],
   "source": [
    "assert isinstance(E2B,float), \"make E2B a float\"\n",
    "print(\"Checkpoint 2.5 passed\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#PLOTTING CELL\n",
    "\n",
    "def poly8(x):\n",
    "    p = 0\n",
    "    for i in range(len(POLY8)):\n",
    "        p += POLY8[i]*x**i\n",
    "\n",
    "        \n",
    "    return p\n",
    "\n",
    "\n",
    "def epoly8(x):\n",
    "    p = 0\n",
    "    for i in range(len(EPOLY8)):\n",
    "        p += EPOLY8[i]*x**i\n",
    "\n",
    "        \n",
    "    return p\n",
    "\n",
    "\n",
    "\n",
    "t3 = np.arange(-2, 2, 0.1)\n",
    "\n",
    "plt.plot(t3, poly8(t3),'blue',t3,epoly8(t3),'red')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Exercise 2(c)** Now use the least squares method to find a cubic of best fit through the non-noisy data given in 2(a). Use the least squares method again to find a cubic of best fit through the noisy data given in 2(b). If the cubic from the non-noisy data is $f(x)$ and the cubic from the noisy data is $f_e(x)$, compute the quotient \n",
    "$$ |f(1.4)-f_e(1.4)|/|f(1.4)| ,$$\n",
    "and assign it to the variable E2C. Note that in this case the two cubic curves are more similar to each other than the two degree 8 curves found in 2(a) and 2(b). In particular, E2C is significantly less than E2B. \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "metadata": {
    "deletable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "3d527b7b04568b9e930c876088663c1f",
     "grade": false,
     "grade_id": "cell-8161f0e1716c5093",
     "locked": false,
     "schema_version": 3,
     "solution": true,
     "task": false
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.14473009929363628\n"
     ]
    }
   ],
   "source": [
    "# YOUR CODE HERE\n",
    "\n",
    "A = np.array([XVAL2A[0],XVAL2A[1],XVAL2A[2],XVAL2A[3],XVAL2A[4],XVAL2A[5],XVAL2A[6],XVAL2A[7],XVAL2A[8]])\n",
    "y = np.array([[YVAL2A[0]],[YVAL2A[1]],[YVAL2A[2]],[YVAL2A[3]],[YVAL2A[4]],[YVAL2A[5]],[YVAL2A[6]],[YVAL2A[7]],[YVAL2A[8]]])\n",
    "\n",
    "#print(A)\n",
    "#print(y)\n",
    "\n",
    "V = np.vander(A, 4, increasing = True)\n",
    "#print(V)\n",
    "\n",
    "B = V.T @ V\n",
    "C = V.T @ y\n",
    "\n",
    "m = np.linalg.solve(B,C)\n",
    "#print(m)\n",
    "\n",
    "ax = 84.79474994 + (33.50606364 * (1.4)) + (-56.6350559 * (1.4**2)) + (0.85799048 * (1.4**3))\n",
    "\n",
    "B = np.array([XVAL2B[0],XVAL2B[1],XVAL2B[2],XVAL2B[3],XVAL2B[4],XVAL2B[5],XVAL2B[6],XVAL2B[7],XVAL2B[8]])\n",
    "z = np.array([[YVAL2B[0]],[YVAL2B[1]],[YVAL2B[2]],[YVAL2B[3]],[YVAL2B[4]],[YVAL2B[5]],[YVAL2B[6]],[YVAL2B[7]],[YVAL2B[8]]])\n",
    "\n",
    "#print(B)\n",
    "#print(z)\n",
    "\n",
    "L = np.vander(B, 4, increasing = True)\n",
    "#print(L)\n",
    "\n",
    "D = L.T @ L\n",
    "E = L.T @ z\n",
    "\n",
    "n = np.linalg.solve(D,E)\n",
    "#print(n)\n",
    "\n",
    "bx = 76.11511948 + (24.56284604 * (1.4)) + (-49.96581091 * (1.4**2)) + (5.03614535 * (1.4**3))\n",
    "\n",
    "#print(ax)\n",
    "#print(bx)\n",
    "\n",
    "t = abs(ax-bx)\n",
    "#print(t)\n",
    "\n",
    "u = abs(ax)\n",
    "#print(u)\n",
    "\n",
    "E2C = t/u\n",
    "print(E2C)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "a2064140a11060e061f7430a08314bc9",
     "grade": true,
     "grade_id": "cell-aa00b76ed155365a",
     "locked": true,
     "points": 2,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Checkpoint 2.7 passed\n"
     ]
    }
   ],
   "source": [
    "assert isinstance(E2C,float), \"make E2C a float\"\n",
    "print(\"Checkpoint 2.7 passed\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Exercise 2(d)** Now lets see we can 'learn' a polynomial from a large enough data set, even if there is noise. Below we give a set of 50 points, XVAL2D and YVAL2D. Use a least squares regression to learn the degree 8 polynomial of best fit through the data. Once again, the data will have 2% pseudorandom noise from the true values. Record your answer by assigning the variable POLY8D = [a0,a1,a2,a3,a4,a5,a6,a7,a8] where the coefficient of the $x^i$ term is ai. \n",
    "\n",
    "Note how much better we were able to learn the original degree 8 polynomial with more data, despite there still being a significant amount of noise. \n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "metadata": {},
   "outputs": [],
   "source": [
    "XVAL2D=[-5.0, -4.8100000000000005, -4.62, -4.43, -4.24, -4.05, -3.86, -3.67, -3.48, -3.29, -3.1, -2.91, -2.72, -2.5300000000000002, -2.34, -2.15, -1.96, -1.77, -1.58, -1.3900000000000001, -1.2, -1.01, -0.8200000000000001, -0.63, -0.44, -0.25, -0.06, 0.13, 0.32, 0.51, 0.7000000000000001, 0.89, 1.08, 1.27, 1.46, 1.6500000000000001, 1.84, 2.0300000000000002, 2.22, 2.41, 2.6, 2.79, 2.98, 3.17, 3.36, 3.5500000000000003, 3.74, 3.93, 4.12, 4.3100000000000005, 4.5, 4.69, 4.88]\n",
    "YVAL2D = [364331.52, 250196.97142492794, 174510.42445803568, 117547.96804333516, 73539.24544491842, 45181.00098766322, 27659.57177276294, 14763.051038402436, 7441.649748920511, 2956.451497970913, 648.5088248100024, -359.7448354667251, -628.9195046132951, -567.932956820949, -339.7858725491313, -129.7399913845925, 27.448333432995813, 111.04013266626525, 130.81666701141782, 101.45475052899141, 53.98744006655997, 2.3991973245218143, -36.167316606287784, -53.65834260248244, -53.86407051910762, -34.633292541503906, -8.848846571482458, 17.52002220583533, 36.363230377409714, 42.27139416152187, 34.83806516189999, 15.0000586715381, -11.508449308709155, -37.54639993300221, -53.09845251182722, -54.204978907297935, -32.378666066689014, 7.376933338722551, 57.975681333623776, 104.84224124488163, 132.21512478720044, 105.79764253313607, 14.205123185155436, -152.56854603073242, -371.5172974113302, -580.1529280496144, -634.1429136674737, -294.87047968201057, 833.4671516442424, 3245.0895448214346, 7997.2470703125, 16145.285017116747, 29161.81117661468]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "metadata": {
    "deletable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "35ddfa1185d354aae755fd6e500b4af5",
     "grade": false,
     "grade_id": "cell-1e3ee1be3381eb37",
     "locked": false,
     "schema_version": 3,
     "solution": true,
     "task": false
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[ 1.00000000e+00 -5.00000000e+00  2.50000000e+01 ...  8.88178420e+34\n",
      "  -4.44089210e+35  2.22044605e+36]\n",
      " [ 1.00000000e+00 -4.81000000e+00  2.31361000e+01 ...  1.28012924e+34\n",
      "  -6.15742166e+34  2.96171982e+35]\n",
      " [ 1.00000000e+00 -4.62000000e+00  2.13444000e+01 ...  1.70647047e+33\n",
      "  -7.88389358e+33  3.64235883e+34]\n",
      " ...\n",
      " [ 1.00000000e+00  4.50000000e+00  2.02500000e+01 ...  4.57747192e+32\n",
      "   2.05986236e+33  9.26938064e+33]\n",
      " [ 1.00000000e+00  4.69000000e+00  2.19961000e+01 ...  3.61944628e+33\n",
      "   1.69752031e+34  7.96137024e+34]\n",
      " [ 1.00000000e+00  4.88000000e+00  2.38144000e+01 ...  2.63627736e+34\n",
      "   1.28650335e+35  6.27813636e+35]]\n",
      "[[-7.81250000e+04  1.56250000e+04 -3.12500000e+03  6.25000000e+02\n",
      "  -1.25000000e+02  2.50000000e+01 -5.00000000e+00  1.00000000e+00]\n",
      " [-5.95683451e+04  1.23842713e+04 -2.57469258e+03  5.35279123e+02\n",
      "  -1.11284641e+02  2.31361000e+01 -4.81000000e+00  1.00000000e+00]\n",
      " [-4.49255941e+04  9.72415457e+03 -2.10479536e+03  4.55583411e+02\n",
      "  -9.86111280e+01  2.13444000e+01 -4.62000000e+00  1.00000000e+00]\n",
      " [-3.34831327e+04  7.55826922e+03 -1.70615558e+03  3.85136700e+02\n",
      "  -8.69383070e+01  1.96249000e+01 -4.43000000e+00  1.00000000e+00]\n",
      " [-2.46354782e+04  5.81025428e+03 -1.37034299e+03  3.23194102e+02\n",
      "  -7.62250240e+01  1.79776000e+01 -4.24000000e+00  1.00000000e+00]\n",
      " [-1.78724941e+04  4.41296151e+03 -1.08962013e+03  2.69042006e+02\n",
      "  -6.64301250e+01  1.64025000e+01 -4.05000000e+00  1.00000000e+00]\n",
      " [-1.27676548e+04  3.30768260e+03 -8.56912589e+02  2.21998080e+02\n",
      "  -5.75124560e+01  1.48996000e+01 -3.86000000e+00  1.00000000e+00]\n",
      " [-8.96731550e+03  2.44341022e+03 -6.65779351e+02  1.81411267e+02\n",
      "  -4.94308630e+01  1.34689000e+01 -3.67000000e+00  1.00000000e+00]\n",
      " [-6.18094256e+03  1.77613292e+03 -5.10383023e+02  1.46661788e+02\n",
      "  -4.21441920e+01  1.21104000e+01 -3.48000000e+00  1.00000000e+00]\n",
      " [-4.17225924e+03  1.26816390e+03 -3.85460153e+02  1.17161141e+02\n",
      "  -3.56112890e+01  1.08241000e+01 -3.29000000e+00  1.00000000e+00]\n",
      " [-2.75126141e+03  8.87503681e+02 -2.86291510e+02  9.23521000e+01\n",
      "  -2.97910000e+01  9.61000000e+00 -3.10000000e+00  1.00000000e+00]\n",
      " [-1.76705848e+03  6.07236592e+02 -2.08672368e+02  7.17087176e+01\n",
      "  -2.46421710e+01  8.46810000e+00 -2.91000000e+00  1.00000000e+00]\n",
      " [-1.10149449e+03  4.04961209e+02 -1.48882797e+02  5.47363226e+01\n",
      "  -2.01236480e+01  7.39840000e+00 -2.72000000e+00  1.00000000e+00]\n",
      " [-6.63504157e+02  2.62254608e+02 -1.03657948e+02  4.09715208e+01\n",
      "  -1.61942770e+01  6.40090000e+00 -2.53000000e+00  1.00000000e+00]\n",
      " [-3.84158991e+02  1.64170509e+02 -7.01583371e+01  2.99821954e+01\n",
      "  -1.28129040e+01  5.47560000e+00 -2.34000000e+00  1.00000000e+00]\n",
      " [-2.12358290e+02  9.87712976e+01 -4.59401384e+01  2.13675062e+01\n",
      "  -9.93837500e+00  4.62250000e+00 -2.15000000e+00  1.00000000e+00]\n",
      " [-1.11120068e+02  5.66939124e+01 -2.89254655e+01  1.47578906e+01\n",
      "  -7.52953600e+00  3.84160000e+00 -1.96000000e+00  1.00000000e+00]\n",
      " [-5.44268080e+01  3.07496090e+01 -1.73726605e+01  9.81506241e+00\n",
      "  -5.54523300e+00  3.13290000e+00 -1.77000000e+00  1.00000000e+00]\n",
      " [-2.45810035e+01  1.55575972e+01 -9.84658048e+00  6.23201296e+00\n",
      "  -3.94431200e+00  2.49640000e+00 -1.58000000e+00  1.00000000e+00]\n",
      " [-1.00254437e+01  7.21254941e+00 -5.18888447e+00  3.73301041e+00\n",
      "  -2.68561900e+00  1.93210000e+00 -1.39000000e+00  1.00000000e+00]\n",
      " [-3.58318080e+00  2.98598400e+00 -2.48832000e+00  2.07360000e+00\n",
      "  -1.72800000e+00  1.44000000e+00 -1.20000000e+00  1.00000000e+00]\n",
      " [-1.07213535e+00  1.06152015e+00 -1.05101005e+00  1.04060401e+00\n",
      "  -1.03030100e+00  1.02010000e+00 -1.01000000e+00  1.00000000e+00]\n",
      " [-2.49285471e-01  3.04006671e-01 -3.70739843e-01  4.52121760e-01\n",
      "  -5.51368000e-01  6.72400000e-01 -8.20000000e-01  1.00000000e+00]\n",
      " [-3.93898064e-02  6.25235022e-02 -9.92436543e-02  1.57529610e-01\n",
      "  -2.50047000e-01  3.96900000e-01 -6.30000000e-01  1.00000000e+00]\n",
      " [-3.19277810e-03  7.25631386e-03 -1.64916224e-02  3.74809600e-02\n",
      "  -8.51840000e-02  1.93600000e-01 -4.40000000e-01  1.00000000e+00]\n",
      " [-6.10351562e-05  2.44140625e-04 -9.76562500e-04  3.90625000e-03\n",
      "  -1.56250000e-02  6.25000000e-02 -2.50000000e-01  1.00000000e+00]\n",
      " [-2.79936000e-09  4.66560000e-08 -7.77600000e-07  1.29600000e-05\n",
      "  -2.16000000e-04  3.60000000e-03 -6.00000000e-02  1.00000000e+00]\n",
      " [ 6.27485170e-07  4.82680900e-06  3.71293000e-05  2.85610000e-04\n",
      "   2.19700000e-03  1.69000000e-02  1.30000000e-01  1.00000000e+00]\n",
      " [ 3.43597384e-04  1.07374182e-03  3.35544320e-03  1.04857600e-02\n",
      "   3.27680000e-02  1.02400000e-01  3.20000000e-01  1.00000000e+00]\n",
      " [ 8.97410678e-03  1.75962878e-02  3.45025251e-02  6.76520100e-02\n",
      "   1.32651000e-01  2.60100000e-01  5.10000000e-01  1.00000000e+00]\n",
      " [ 8.23543000e-02  1.17649000e-01  1.68070000e-01  2.40100000e-01\n",
      "   3.43000000e-01  4.90000000e-01  7.00000000e-01  1.00000000e+00]\n",
      " [ 4.42313349e-01  4.96981291e-01  5.58405945e-01  6.27422410e-01\n",
      "   7.04969000e-01  7.92100000e-01  8.90000000e-01  1.00000000e+00]\n",
      " [ 1.71382427e+00  1.58687432e+00  1.46932808e+00  1.36048896e+00\n",
      "   1.25971200e+00  1.16640000e+00  1.08000000e+00  1.00000000e+00]\n",
      " [ 5.32875860e+00  4.19587291e+00  3.30383694e+00  2.60144641e+00\n",
      "   2.04838300e+00  1.61290000e+00  1.27000000e+00  1.00000000e+00]\n",
      " [ 1.41406701e+01  9.68539048e+00  6.63382910e+00  4.54371856e+00\n",
      "   3.11213600e+00  2.13160000e+00  1.46000000e+00  1.00000000e+00]\n",
      " [ 3.32956586e+01  2.01791870e+01  1.22298103e+01  7.41200625e+00\n",
      "   4.49212500e+00  2.72250000e+00  1.65000000e+00  1.00000000e+00]\n",
      " [ 7.14043650e+01  3.88067201e+01  2.10906087e+01  1.14622874e+01\n",
      "   6.22950400e+00  3.38560000e+00  1.84000000e+00  1.00000000e+00]\n",
      " [ 1.42060149e+02  6.99803689e+01  3.44730881e+01  1.69818168e+01\n",
      "   8.36542700e+00  4.12090000e+00  2.03000000e+00  1.00000000e+00]\n",
      " [ 2.65748500e+02  1.19706531e+02  5.39218610e+01  2.42891266e+01\n",
      "   1.09410480e+01  4.92840000e+00  2.22000000e+00  1.00000000e+00]\n",
      " [ 4.72192732e+02  1.95930594e+02  8.12990017e+01  3.37340256e+01\n",
      "   1.39975210e+01  5.80810000e+00  2.41000000e+00  1.00000000e+00]\n",
      " [ 8.03181018e+02  3.08915776e+02  1.18813760e+02  4.56976000e+01\n",
      "   1.75760000e+01  6.76000000e+00  2.60000000e+00  1.00000000e+00]\n",
      " [ 1.31591980e+03  4.71655844e+02  1.69052274e+02  6.05922128e+01\n",
      "   2.17176390e+01  7.78410000e+00  2.79000000e+00  1.00000000e+00]\n",
      " [ 2.08695867e+03  7.00321702e+02  2.35007282e+02  7.88615042e+01\n",
      "   2.64635920e+01  8.88040000e+00  2.98000000e+00  1.00000000e+00]\n",
      " [ 3.21673167e+03  1.01474185e+03  3.20107840e+02  1.00980391e+02\n",
      "   3.18550130e+01  1.00489000e+01  3.17000000e+00  1.00000000e+00]\n",
      " [ 4.83476024e+03  1.43891674e+03  4.28249029e+02  1.27455068e+02\n",
      "   3.79330560e+01  1.12896000e+01  3.36000000e+00  1.00000000e+00]\n",
      " [ 7.10556262e+03  2.00156694e+03  5.63821672e+02  1.58823006e+02\n",
      "   4.47388750e+01  1.26025000e+01  3.55000000e+00  1.00000000e+00]\n",
      " [ 1.02353151e+04  2.73671526e+03  7.31742047e+02  1.95652954e+02\n",
      "   5.23136240e+01  1.39876000e+01  3.74000000e+00  1.00000000e+00]\n",
      " [ 1.44793095e+04  3.68430268e+03  9.37481599e+02  2.38544936e+02\n",
      "   6.06984570e+01  1.54449000e+01  3.93000000e+00  1.00000000e+00]\n",
      " [ 2.01502534e+04  4.89083821e+03  1.18709665e+03  2.88130255e+02\n",
      "   6.99345280e+01  1.69744000e+01  4.12000000e+00  1.00000000e+00]\n",
      " [ 2.76274557e+04  6.41008253e+03  1.48725813e+03  3.45071491e+02\n",
      "   8.00629910e+01  1.85761000e+01  4.31000000e+00  1.00000000e+00]\n",
      " [ 3.73669453e+04  8.30376562e+03  1.84528125e+03  4.10062500e+02\n",
      "   9.11250000e+01  2.02500000e+01  4.50000000e+00  1.00000000e+00]\n",
      " [ 4.99125662e+04  1.06423382e+04  2.26915527e+03  4.83828415e+02\n",
      "   1.03161709e+02  2.19961000e+01  4.69000000e+00  1.00000000e+00]\n",
      " [ 6.59080942e+04  1.35057570e+04  2.76757316e+03  5.67125647e+02\n",
      "   1.16214272e+02  2.38144000e+01  4.88000000e+00  1.00000000e+00]]\n",
      "[-2187.3675851718144, 545.1492773368332, 3089.310784259338, -368.717394337247, -633.485800413046, 73.53906007642937, 32.98880845729789, -4.48930859209547]\n"
     ]
    }
   ],
   "source": [
    "# YOUR CODE HERE\n",
    "\n",
    "VD = np.vander(np.array(XVAL2D), increasing = True)\n",
    "print(VD)\n",
    "Ad = np.array([VD[:,7],VD[:,6],VD[:,5],VD[:,4],VD[:,3],VD[:,2],VD[:,1],VD[:,0]]).T\n",
    "print(Ad)\n",
    "yd = np.array(YVAL2D).reshape(53,1)\n",
    "\n",
    "INVATA1D = la.inv(Ad.T @ Ad)\n",
    "xlsld = INVATA1D @ (Ad.T @ yd)\n",
    "POLY8D = [xlsld[7,0],xlsld[6,0],xlsld[5,0],xlsld[4,0],xlsld[3,0],xlsld[2,0],xlsld[1,0],xlsld[0,0]]\n",
    "print(POLY8D)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "eb7a0db37112a21094f42d7e0c58cbed",
     "grade": true,
     "grade_id": "cell-57ea13035f1bf252",
     "locked": true,
     "points": 1,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Checkpoint 2.9 passed\n"
     ]
    }
   ],
   "source": [
    "assert isinstance(POLY8D,list), \"make POLY8D a float\"\n",
    "print(\"Checkpoint 2.9 passed\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#PLOTTING CELL\n",
    "\n",
    "def poly8D(x):\n",
    "    p = 0\n",
    "    for i in range(len(POLY8D)):\n",
    "        p += POLY8D[i]*x**i\n",
    "\n",
    "        \n",
    "    return p\n",
    "\n",
    "\n",
    "\n",
    "t3 = np.arange(-3, 3, 0.1)\n",
    "\n",
    "plt.plot(t3, poly8(t3),'blue',t3,poly8D(t3),'red')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
